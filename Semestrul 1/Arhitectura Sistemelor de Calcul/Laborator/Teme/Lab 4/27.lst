     1                                  ; Se da quadwordul A. 
     2                                  ; Sa se obtina numarul intreg N reprezentat de bitii 35-37 ai lui A. 
     3                                  ; Sa se obtina apoi in B dublucuvantul rezultat prin rotirea spre dreapta a dublucuvantului inferior al lui A cu N pozitii. 
     4                                  
     5                                  ; Sa se obtina octetul C astfel:
     6                                  
     7                                  ;   bitii 0-3 ai lui C sunt bitii 8-11 ai lui B
     8                                  ;   bitii 4-7 ai lui C sunt bitii 16-19 ai lui B
     9                                  
    10                                  bits 32
    11                                  
    12                                  global start                
    13                                  
    14                                  extern exit
    15                                  import exit msvcrt.dll
    16                                  
    17                                  ; A - quadword, 
    18                                  segment data use32 class=data
    19 00000000 A2DC23B169A74742            a dq 4247a769b123dca2h
    20 00000008 <res 00000004>              b resw 2 ; se rezerva 2 words  = 1 doubleword
    21 0000000C <res 00000001>              c resb 1 ; se rezerva un octet
    22 0000000D <res 00000001>              n resb 1
    23                                      
    24                                  segment code use32 class=code
    25                                      start:
    26                                      
    27 00000000 66BB0000                        mov bx, 0   ; in registrul bx vom calcula rezultatul
    28                                      
    29 00000004 A1[00000000]                   mov eax, [a]
    30 00000009 8B15[04000000]                 mov edx, [a+4]               ; edx:eax = a
    31                                         
    32 0000000F 83E269                         and edx, 000000069h
    33 00000012 80E21C                         and dl, 0001_1100b
    34 00000015 B102                           mov cl, 2
    35 00000017 D2CA                           ror dl, cl                           ; dl  = 0000_0010b
    36 00000019 8815[0D000000]                 mov [n], dl
    37                                        
    38 0000001F 8A0D[0D000000]                 mov cl, [n]
    39 00000025 D3C8                           ror eax, cl                  ; se roteste la dreapta doubleword-ul inferior (eax) a lui a cu n pozitii
    40 00000027 A3[08000000]                   mov [b], eax
    41                                  
    42 0000002C 6625000F                       and ax, 0000_1111_0000_0000b   ; izolam bitii 9-11 ai lui b
    43 00000030 B108                           mov cl, 8
    44 00000032 66D3C8                         ror ax, cl
    45 00000035 6609C3                         or bx, ax  
    46                                         
    47 00000038 66A1[0A000000]                 mov ax, [b+2]
    48 0000003E 240F                           and al, 0000_1111b    ; izolam bitii 16-19 ai lui b
    49 00000040 B400                           mov ah, 0
    50 00000042 B104                           mov cl, 4
    51 00000044 D2C0                           rol al, cl          
    52 00000046 6609C3                         or bx, ax
    53                                         
    54 00000049 66891D[0C000000]               mov [c], bx ; punem valoarea din registru in variabila rezultat
    55                                         
    56 00000050 6A00                         push dword 0
    57 00000052 FF15[00000000]               call [exit]
    58                                  
