//AB.h
#include <string>

typedef int TElem;

class AB {
	private:
		/* aici e reprezentarea */
	public:
		//constructorul implicit
		AB();

		//creeaza un arbore binar care se reduce la o frunza
		AB(TElem elem);
		
		//constructor arbore binar
		AB(const AB& st, TElem elem, const AB& dr);

		//adauga unui arbore binar subarborele stang	
		//arunca exceptie daca arborele este vid
		void adaugaSubSt(const AB& st);

		//adauga unui arbore binar subarborele drept
		//arunca exceptie daca arborele este vid
		void adaugaSubDr(const AB& dr);

		//verifica daca arborele este vid
   		 bool vid() const;

		//accesare element din radacina
		//arunca exceptie daca arborele este vid	
		TElem element() const;

		//accesare subarbore stang
		//arunca exceptie daca arborele este vid
		AB stang() const;

		//accesare subarbore drept
		//arunca exceptie daca arborele este vid
		AB drept() const;

		//iteratori pe arborele binar (ordine="preordine", "postordine", "inordine", "latime")	
		IteratorAB* iterator(string ordine);
 		
		// destructorul arborelui binar
		~AB();
};
  
//IteratorAB.h

//clasa abstracta pura
class IteratorAB {
public:

		//operatii pe iterator
		virtual void prim() = 0;

		virtual void urmator() =  0;

		virtual TElem element() = 0;

		virtual bool valid() = 0;
};

//aceasta clasa implementeaza clasa abstracta IteratorAB
class IteratorPreordine: public IteratorAB{
private:
   		  //aici e reprezentarea
public:
   		 // aici sunt operatiile
};

...