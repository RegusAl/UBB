     1                                  ; Se da quadwordul A. 
     2                                  ; Sa se obtina numarul intreg N reprezentat de bitii 35-37 ai lui A. 
     3                                  ; Sa se obtina apoi in B dublucuvantul rezultat prin rotirea spre dreapta a dublucuvantului inferior al lui A cu N pozitii. 
     4                                  
     5                                  ; Sa se obtina octetul C astfel:
     6                                  
     7                                  ;   bitii 0-3 ai lui C sunt bitii 8-11 ai lui B
     8                                  ;   bitii 4-7 ai lui C sunt bitii 16-19 ai lui B
     9                                  
    10                                  ; Date de test: a = 12348a9f5678af9a
    11                                  
    12                                  bits 32
    13                                  
    14                                  global start                
    15                                  
    16                                  extern exit
    17                                  import exit msvcrt.dll
    18                                  
    19                                  ; A - quadword, 
    20                                  segment data use32 class=data
    21 00000000 9AAF78569F8A3412            a dq 12348a9f5678af9ah 
    22 00000008 <res 00000004>              b resw 2 ; se rezerva 2 words  = 1 doubleword
    23 0000000C <res 00000001>              c resb 1 ; se rezerva un octet
    24 0000000D <res 00000001>              n resb 1
    25                                      
    26                                      ; n = 3
    27                                      ; c = f5
    28                                      
    29                                  segment code use32 class=code
    30                                      start:
    31                                      
    32 00000000 66BB0000                        mov bx, 0   ; in registrul bx vom calcula rezultatul
    33                                      
    34 00000004 A1[00000000]                   mov eax, [a]
    35 00000009 8B15[04000000]                 mov edx, [a+4]               ; edx:eax = a
    36                                         
    37 0000000F 81E29F000000                   and edx, 0000009fh
    38 00000015 80E238                         and dl, 0011_1000b
    39 00000018 B103                           mov cl, 3
    40 0000001A D2CA                           ror dl, cl                           ; dl  = 0000_0101b
    41 0000001C 8815[0D000000]                 mov [n], dl
    42                                        
    43 00000022 8A0D[0D000000]                 mov cl, [n]
    44 00000028 D3C8                           ror eax, cl                  ; se roteste la dreapta doubleword-ul inferior (eax) a lui a cu n pozitii
    45 0000002A A3[08000000]                   mov [b], eax
    46                                  
    47 0000002F 6625000F                       and ax, 0000_1111_0000_0000b   ; izolam bitii 8-11 ai lui b
    48 00000033 B108                           mov cl, 8
    49 00000035 66D3C8                         ror ax, cl
    50 00000038 6609C3                         or bx, ax  
    51                                         
    52 0000003B 66A1[0A000000]                 mov ax, [b+2]
    53 00000041 240F                           and al, 0000_1111b    ; izolam bitii 16-19 ai lui b
    54 00000043 B104                           mov cl, 4
    55 00000045 D2C0                           rol al, cl          
    56 00000047 6609C3                         or bx, ax
    57                                         
    58 0000004A 66891D[0C000000]              mov [c], bx ; punem valoarea din registru in variabila rezultat
    59                                         
    60 00000051 6A00                         push dword 0
    61 00000053 FF15[00000000]               call [exit]
    62                                  
